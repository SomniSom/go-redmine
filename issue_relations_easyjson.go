// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redmine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonDb4f4169DecodeGoRedmine(in *jlexer.Lexer, out *issueRelationsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "relations":
			if in.IsNull() {
				in.Skip()
				out.IssueRelations = nil
			} else {
				in.Delim('[')
				if out.IssueRelations == nil {
					if !in.IsDelim(']') {
						out.IssueRelations = make([]IssueRelation, 0, 1)
					} else {
						out.IssueRelations = []IssueRelation{}
					}
				} else {
					out.IssueRelations = (out.IssueRelations)[:0]
				}
				for !in.IsDelim(']') {
					var v1 IssueRelation
					(v1).UnmarshalEasyJSON(in)
					out.IssueRelations = append(out.IssueRelations, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb4f4169EncodeGoRedmine(out *jwriter.Writer, in issueRelationsResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"relations\":"
		out.RawString(prefix[1:])
		if in.IssueRelations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.IssueRelations {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueRelationsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb4f4169EncodeGoRedmine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueRelationsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb4f4169EncodeGoRedmine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueRelationsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb4f4169DecodeGoRedmine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueRelationsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb4f4169DecodeGoRedmine(l, v)
}
func easyjsonDb4f4169DecodeGoRedmine1(in *jlexer.Lexer, out *issueRelationResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issue_relation":
			(out.IssueRelation).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb4f4169EncodeGoRedmine1(out *jwriter.Writer, in issueRelationResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issue_relation\":"
		out.RawString(prefix[1:])
		(in.IssueRelation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueRelationResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb4f4169EncodeGoRedmine1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueRelationResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb4f4169EncodeGoRedmine1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueRelationResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb4f4169DecodeGoRedmine1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueRelationResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb4f4169DecodeGoRedmine1(l, v)
}
func easyjsonDb4f4169DecodeGoRedmine2(in *jlexer.Lexer, out *issueRelationRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issue_relation":
			(out.IssueRelation).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb4f4169EncodeGoRedmine2(out *jwriter.Writer, in issueRelationRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issue_relation\":"
		out.RawString(prefix[1:])
		(in.IssueRelation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueRelationRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb4f4169EncodeGoRedmine2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueRelationRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb4f4169EncodeGoRedmine2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueRelationRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb4f4169DecodeGoRedmine2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueRelationRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb4f4169DecodeGoRedmine2(l, v)
}
func easyjsonDb4f4169DecodeGoRedmine3(in *jlexer.Lexer, out *IssueRelation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "issue_id":
			out.IssueId = string(in.String())
		case "issue_to_id":
			out.IssueToId = string(in.String())
		case "relation_type":
			out.RelationType = string(in.String())
		case "delay":
			out.Delay = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonDb4f4169EncodeGoRedmine3(out *jwriter.Writer, in IssueRelation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"issue_id\":"
		out.RawString(prefix)
		out.String(string(in.IssueId))
	}
	{
		const prefix string = ",\"issue_to_id\":"
		out.RawString(prefix)
		out.String(string(in.IssueToId))
	}
	{
		const prefix string = ",\"relation_type\":"
		out.RawString(prefix)
		out.String(string(in.RelationType))
	}
	{
		const prefix string = ",\"delay\":"
		out.RawString(prefix)
		out.String(string(in.Delay))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IssueRelation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonDb4f4169EncodeGoRedmine3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IssueRelation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonDb4f4169EncodeGoRedmine3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IssueRelation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonDb4f4169DecodeGoRedmine3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IssueRelation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonDb4f4169DecodeGoRedmine3(l, v)
}
