// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redmine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson33a703e0DecodeGithubComSomniSomGoRedmine(in *jlexer.Lexer, out *membershipsResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "memberships":
			if in.IsNull() {
				in.Skip()
				out.Memberships = nil
			} else {
				in.Delim('[')
				if out.Memberships == nil {
					if !in.IsDelim(']') {
						out.Memberships = make([]Membership, 0, 1)
					} else {
						out.Memberships = []Membership{}
					}
				} else {
					out.Memberships = (out.Memberships)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Membership
					(v1).UnmarshalEasyJSON(in)
					out.Memberships = append(out.Memberships, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson33a703e0EncodeGithubComSomniSomGoRedmine(out *jwriter.Writer, in membershipsResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"memberships\":"
		out.RawString(prefix[1:])
		if in.Memberships == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Memberships {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v membershipsResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v membershipsResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *membershipsResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *membershipsResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine(l, v)
}
func easyjson33a703e0DecodeGithubComSomniSomGoRedmine1(in *jlexer.Lexer, out *membershipResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "membership":
			(out.Membership).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson33a703e0EncodeGithubComSomniSomGoRedmine1(out *jwriter.Writer, in membershipResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"membership\":"
		out.RawString(prefix[1:])
		(in.Membership).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v membershipResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v membershipResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *membershipResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *membershipResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine1(l, v)
}
func easyjson33a703e0DecodeGithubComSomniSomGoRedmine2(in *jlexer.Lexer, out *membershipRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "membership":
			(out.Membership).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson33a703e0EncodeGithubComSomniSomGoRedmine2(out *jwriter.Writer, in membershipRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"membership\":"
		out.RawString(prefix[1:])
		(in.Membership).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v membershipRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v membershipRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *membershipRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *membershipRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine2(l, v)
}
func easyjson33a703e0DecodeGithubComSomniSomGoRedmine3(in *jlexer.Lexer, out *Membership) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "project":
			easyjson33a703e0DecodeGithubComSomniSomGoRedmine4(in, &out.Project)
		case "user":
			easyjson33a703e0DecodeGithubComSomniSomGoRedmine4(in, &out.User)
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]IdName, 0, 2)
					} else {
						out.Roles = []IdName{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v4 IdName
					easyjson33a703e0DecodeGithubComSomniSomGoRedmine4(in, &v4)
					out.Roles = append(out.Roles, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "groups":
			if in.IsNull() {
				in.Skip()
				out.Groups = nil
			} else {
				in.Delim('[')
				if out.Groups == nil {
					if !in.IsDelim(']') {
						out.Groups = make([]IdName, 0, 2)
					} else {
						out.Groups = []IdName{}
					}
				} else {
					out.Groups = (out.Groups)[:0]
				}
				for !in.IsDelim(']') {
					var v5 IdName
					easyjson33a703e0DecodeGithubComSomniSomGoRedmine4(in, &v5)
					out.Groups = append(out.Groups, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson33a703e0EncodeGithubComSomniSomGoRedmine3(out *jwriter.Writer, in Membership) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix)
		easyjson33a703e0EncodeGithubComSomniSomGoRedmine4(out, in.Project)
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson33a703e0EncodeGithubComSomniSomGoRedmine4(out, in.User)
	}
	{
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		if in.Roles == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Roles {
				if v6 > 0 {
					out.RawByte(',')
				}
				easyjson33a703e0EncodeGithubComSomniSomGoRedmine4(out, v7)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"groups\":"
		out.RawString(prefix)
		if in.Groups == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Groups {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson33a703e0EncodeGithubComSomniSomGoRedmine4(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Membership) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Membership) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson33a703e0EncodeGithubComSomniSomGoRedmine3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Membership) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Membership) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson33a703e0DecodeGithubComSomniSomGoRedmine3(l, v)
}
func easyjson33a703e0DecodeGithubComSomniSomGoRedmine4(in *jlexer.Lexer, out *IdName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson33a703e0EncodeGithubComSomniSomGoRedmine4(out *jwriter.Writer, in IdName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
