// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redmine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9e1087fdDecodeGoRedmine(in *jlexer.Lexer, out *usersResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "users":
			if in.IsNull() {
				in.Skip()
				out.Users = nil
			} else {
				in.Delim('[')
				if out.Users == nil {
					if !in.IsDelim(']') {
						out.Users = make([]User, 0, 1)
					} else {
						out.Users = []User{}
					}
				} else {
					out.Users = (out.Users)[:0]
				}
				for !in.IsDelim(']') {
					var v1 User
					(v1).UnmarshalEasyJSON(in)
					out.Users = append(out.Users, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeGoRedmine(out *jwriter.Writer, in usersResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"users\":"
		out.RawString(prefix[1:])
		if in.Users == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Users {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v usersResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeGoRedmine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v usersResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeGoRedmine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *usersResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeGoRedmine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *usersResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeGoRedmine(l, v)
}
func easyjson9e1087fdDecodeGoRedmine1(in *jlexer.Lexer, out *userResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user":
			(out.User).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeGoRedmine1(out *jwriter.Writer, in userResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix[1:])
		(in.User).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v userResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeGoRedmine1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v userResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeGoRedmine1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *userResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeGoRedmine1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *userResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeGoRedmine1(l, v)
}
func easyjson9e1087fdDecodeGoRedmine2(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "login":
			out.Login = string(in.String())
		case "firstname":
			out.Firstname = string(in.String())
		case "lastname":
			out.Lastname = string(in.String())
		case "mail":
			out.Mail = string(in.String())
		case "created_on":
			out.CreatedOn = string(in.String())
		case "last_login_on":
			out.LatLoginOn = string(in.String())
		case "memberships":
			if in.IsNull() {
				in.Skip()
				out.Memberships = nil
			} else {
				in.Delim('[')
				if out.Memberships == nil {
					if !in.IsDelim(']') {
						out.Memberships = make([]Membership, 0, 1)
					} else {
						out.Memberships = []Membership{}
					}
				} else {
					out.Memberships = (out.Memberships)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Membership
					(v4).UnmarshalEasyJSON(in)
					out.Memberships = append(out.Memberships, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "custom_fields":
			if in.IsNull() {
				in.Skip()
				out.CustomFields = nil
			} else {
				in.Delim('[')
				if out.CustomFields == nil {
					if !in.IsDelim(']') {
						out.CustomFields = make([]*CustomField, 0, 8)
					} else {
						out.CustomFields = []*CustomField{}
					}
				} else {
					out.CustomFields = (out.CustomFields)[:0]
				}
				for !in.IsDelim(']') {
					var v5 *CustomField
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						if v5 == nil {
							v5 = new(CustomField)
						}
						(*v5).UnmarshalEasyJSON(in)
					}
					out.CustomFields = append(out.CustomFields, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9e1087fdEncodeGoRedmine2(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"login\":"
		out.RawString(prefix)
		out.String(string(in.Login))
	}
	{
		const prefix string = ",\"firstname\":"
		out.RawString(prefix)
		out.String(string(in.Firstname))
	}
	{
		const prefix string = ",\"lastname\":"
		out.RawString(prefix)
		out.String(string(in.Lastname))
	}
	{
		const prefix string = ",\"mail\":"
		out.RawString(prefix)
		out.String(string(in.Mail))
	}
	{
		const prefix string = ",\"created_on\":"
		out.RawString(prefix)
		out.String(string(in.CreatedOn))
	}
	{
		const prefix string = ",\"last_login_on\":"
		out.RawString(prefix)
		out.String(string(in.LatLoginOn))
	}
	{
		const prefix string = ",\"memberships\":"
		out.RawString(prefix)
		if in.Memberships == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Memberships {
				if v6 > 0 {
					out.RawByte(',')
				}
				(v7).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.CustomFields) != 0 {
		const prefix string = ",\"custom_fields\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v8, v9 := range in.CustomFields {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9e1087fdEncodeGoRedmine2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9e1087fdEncodeGoRedmine2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9e1087fdDecodeGoRedmine2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9e1087fdDecodeGoRedmine2(l, v)
}
