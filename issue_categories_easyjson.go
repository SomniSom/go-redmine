// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redmine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1f7b7cc8DecodeGoRedmine(in *jlexer.Lexer, out *issueCategoryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issue_category":
			(out.IssueCategory).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1f7b7cc8EncodeGoRedmine(out *jwriter.Writer, in issueCategoryResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issue_category\":"
		out.RawString(prefix[1:])
		(in.IssueCategory).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueCategoryResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1f7b7cc8EncodeGoRedmine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueCategoryResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1f7b7cc8EncodeGoRedmine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueCategoryResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1f7b7cc8DecodeGoRedmine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueCategoryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1f7b7cc8DecodeGoRedmine(l, v)
}
func easyjson1f7b7cc8DecodeGoRedmine1(in *jlexer.Lexer, out *issueCategoryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issue_category":
			(out.IssueCategory).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1f7b7cc8EncodeGoRedmine1(out *jwriter.Writer, in issueCategoryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issue_category\":"
		out.RawString(prefix[1:])
		(in.IssueCategory).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueCategoryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1f7b7cc8EncodeGoRedmine1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueCategoryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1f7b7cc8EncodeGoRedmine1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueCategoryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1f7b7cc8DecodeGoRedmine1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueCategoryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1f7b7cc8DecodeGoRedmine1(l, v)
}
func easyjson1f7b7cc8DecodeGoRedmine2(in *jlexer.Lexer, out *issueCategoriesResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "issue_categories":
			if in.IsNull() {
				in.Skip()
				out.IssueCategories = nil
			} else {
				in.Delim('[')
				if out.IssueCategories == nil {
					if !in.IsDelim(']') {
						out.IssueCategories = make([]IssueCategory, 0, 1)
					} else {
						out.IssueCategories = []IssueCategory{}
					}
				} else {
					out.IssueCategories = (out.IssueCategories)[:0]
				}
				for !in.IsDelim(']') {
					var v1 IssueCategory
					(v1).UnmarshalEasyJSON(in)
					out.IssueCategories = append(out.IssueCategories, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "total_count":
			out.TotalCount = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1f7b7cc8EncodeGoRedmine2(out *jwriter.Writer, in issueCategoriesResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"issue_categories\":"
		out.RawString(prefix[1:])
		if in.IssueCategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.IssueCategories {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"total_count\":"
		out.RawString(prefix)
		out.Int(int(in.TotalCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v issueCategoriesResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1f7b7cc8EncodeGoRedmine2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v issueCategoriesResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1f7b7cc8EncodeGoRedmine2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *issueCategoriesResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1f7b7cc8DecodeGoRedmine2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *issueCategoriesResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1f7b7cc8DecodeGoRedmine2(l, v)
}
func easyjson1f7b7cc8DecodeGoRedmine3(in *jlexer.Lexer, out *IssueCategory) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "project":
			easyjson1f7b7cc8DecodeGoRedmine4(in, &out.Project)
		case "name":
			out.Name = string(in.String())
		case "assigned_to":
			easyjson1f7b7cc8DecodeGoRedmine4(in, &out.AssignedTo)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1f7b7cc8EncodeGoRedmine3(out *jwriter.Writer, in IssueCategory) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix)
		easyjson1f7b7cc8EncodeGoRedmine4(out, in.Project)
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"assigned_to\":"
		out.RawString(prefix)
		easyjson1f7b7cc8EncodeGoRedmine4(out, in.AssignedTo)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IssueCategory) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1f7b7cc8EncodeGoRedmine3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IssueCategory) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1f7b7cc8EncodeGoRedmine3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IssueCategory) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1f7b7cc8DecodeGoRedmine3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IssueCategory) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1f7b7cc8DecodeGoRedmine3(l, v)
}
func easyjson1f7b7cc8DecodeGoRedmine4(in *jlexer.Lexer, out *IdName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1f7b7cc8EncodeGoRedmine4(out *jwriter.Writer, in IdName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
