// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redmine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson99b6b16cDecodeGoRedmine(in *jlexer.Lexer, out *wikiPagesResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wiki_pages":
			if in.IsNull() {
				in.Skip()
				out.WikiPages = nil
			} else {
				in.Delim('[')
				if out.WikiPages == nil {
					if !in.IsDelim(']') {
						out.WikiPages = make([]WikiPage, 0, 1)
					} else {
						out.WikiPages = []WikiPage{}
					}
				} else {
					out.WikiPages = (out.WikiPages)[:0]
				}
				for !in.IsDelim(']') {
					var v1 WikiPage
					(v1).UnmarshalEasyJSON(in)
					out.WikiPages = append(out.WikiPages, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson99b6b16cEncodeGoRedmine(out *jwriter.Writer, in wikiPagesResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wiki_pages\":"
		out.RawString(prefix[1:])
		if in.WikiPages == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.WikiPages {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wikiPagesResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson99b6b16cEncodeGoRedmine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wikiPagesResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson99b6b16cEncodeGoRedmine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wikiPagesResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson99b6b16cDecodeGoRedmine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wikiPagesResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson99b6b16cDecodeGoRedmine(l, v)
}
func easyjson99b6b16cDecodeGoRedmine1(in *jlexer.Lexer, out *wikiPageResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wiki_page":
			(out.WikiPage).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson99b6b16cEncodeGoRedmine1(out *jwriter.Writer, in wikiPageResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wiki_page\":"
		out.RawString(prefix[1:])
		(in.WikiPage).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wikiPageResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson99b6b16cEncodeGoRedmine1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wikiPageResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson99b6b16cEncodeGoRedmine1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wikiPageResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson99b6b16cDecodeGoRedmine1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wikiPageResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson99b6b16cDecodeGoRedmine1(l, v)
}
func easyjson99b6b16cDecodeGoRedmine2(in *jlexer.Lexer, out *wikiPageRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "wiki_page":
			(out.WikiPage).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson99b6b16cEncodeGoRedmine2(out *jwriter.Writer, in wikiPageRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"wiki_page\":"
		out.RawString(prefix[1:])
		(in.WikiPage).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v wikiPageRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson99b6b16cEncodeGoRedmine2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v wikiPageRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson99b6b16cEncodeGoRedmine2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *wikiPageRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson99b6b16cDecodeGoRedmine2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *wikiPageRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson99b6b16cDecodeGoRedmine2(l, v)
}
func easyjson99b6b16cDecodeGoRedmine3(in *jlexer.Lexer, out *WikiPage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		case "parent":
			if in.IsNull() {
				in.Skip()
				out.Parent = nil
			} else {
				if out.Parent == nil {
					out.Parent = new(Parent)
				}
				(*out.Parent).UnmarshalEasyJSON(in)
			}
		case "text":
			out.Text = string(in.String())
		case "version":
			if m, ok := out.Version.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Version.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Version = in.Interface()
			}
		case "author":
			if in.IsNull() {
				in.Skip()
				out.Author = nil
			} else {
				if out.Author == nil {
					out.Author = new(IdName)
				}
				(*out.Author).UnmarshalEasyJSON(in)
			}
		case "comments":
			out.Comments = string(in.String())
		case "created_on":
			out.CreatedOn = string(in.String())
		case "updated_on":
			out.UpdatedOn = string(in.String())
		case "parent_id":
			out.ParentID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson99b6b16cEncodeGoRedmine3(out *jwriter.Writer, in WikiPage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	if in.Parent != nil {
		const prefix string = ",\"parent\":"
		out.RawString(prefix)
		(*in.Parent).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	if in.Version != nil {
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		if m, ok := in.Version.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Version.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Version))
		}
	}
	if in.Author != nil {
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		(*in.Author).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		out.String(string(in.Comments))
	}
	if in.CreatedOn != "" {
		const prefix string = ",\"created_on\":"
		out.RawString(prefix)
		out.String(string(in.CreatedOn))
	}
	if in.UpdatedOn != "" {
		const prefix string = ",\"updated_on\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedOn))
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		out.Int(int(in.ParentID))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v WikiPage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson99b6b16cEncodeGoRedmine3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WikiPage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson99b6b16cEncodeGoRedmine3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WikiPage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson99b6b16cDecodeGoRedmine3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WikiPage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson99b6b16cDecodeGoRedmine3(l, v)
}
func easyjson99b6b16cDecodeGoRedmine4(in *jlexer.Lexer, out *Parent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson99b6b16cEncodeGoRedmine4(out *jwriter.Writer, in Parent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix[1:])
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Parent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson99b6b16cEncodeGoRedmine4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Parent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson99b6b16cEncodeGoRedmine4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Parent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson99b6b16cDecodeGoRedmine4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Parent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson99b6b16cDecodeGoRedmine4(l, v)
}
