// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package redmine

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonE672cca2DecodeGithubComSomniSomGoRedmine(in *jlexer.Lexer, out *timeEntryResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_entry":
			(out.TimeEntry).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComSomniSomGoRedmine(out *jwriter.Writer, in timeEntryResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_entry\":"
		out.RawString(prefix[1:])
		(in.TimeEntry).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v timeEntryResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v timeEntryResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *timeEntryResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *timeEntryResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine(l, v)
}
func easyjsonE672cca2DecodeGithubComSomniSomGoRedmine1(in *jlexer.Lexer, out *timeEntryRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_entry":
			(out.TimeEntry).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComSomniSomGoRedmine1(out *jwriter.Writer, in timeEntryRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_entry\":"
		out.RawString(prefix[1:])
		(in.TimeEntry).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v timeEntryRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v timeEntryRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *timeEntryRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *timeEntryRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine1(l, v)
}
func easyjsonE672cca2DecodeGithubComSomniSomGoRedmine2(in *jlexer.Lexer, out *timeEntriesResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time_entries":
			if in.IsNull() {
				in.Skip()
				out.TimeEntries = nil
			} else {
				in.Delim('[')
				if out.TimeEntries == nil {
					if !in.IsDelim(']') {
						out.TimeEntries = make([]TimeEntry, 0, 1)
					} else {
						out.TimeEntries = []TimeEntry{}
					}
				} else {
					out.TimeEntries = (out.TimeEntries)[:0]
				}
				for !in.IsDelim(']') {
					var v1 TimeEntry
					(v1).UnmarshalEasyJSON(in)
					out.TimeEntries = append(out.TimeEntries, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComSomniSomGoRedmine2(out *jwriter.Writer, in timeEntriesResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"time_entries\":"
		out.RawString(prefix[1:])
		if in.TimeEntries == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.TimeEntries {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v timeEntriesResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v timeEntriesResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *timeEntriesResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *timeEntriesResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine2(l, v)
}
func easyjsonE672cca2DecodeGithubComSomniSomGoRedmine3(in *jlexer.Lexer, out *TimeEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "project":
			easyjsonE672cca2DecodeGithubComSomniSomGoRedmine4(in, &out.Project)
		case "issue":
			easyjsonE672cca2DecodeGithubComSomniSomGoRedmine5(in, &out.Issue)
		case "user":
			easyjsonE672cca2DecodeGithubComSomniSomGoRedmine4(in, &out.User)
		case "activity":
			easyjsonE672cca2DecodeGithubComSomniSomGoRedmine4(in, &out.Activity)
		case "hours":
			out.Hours = float32(in.Float32())
		case "comments":
			out.Comments = string(in.String())
		case "spent_on":
			out.SpentOn = string(in.String())
		case "created_on":
			out.CreatedOn = string(in.String())
		case "updated_on":
			out.UpdatedOn = string(in.String())
		case "custom_fields":
			if in.IsNull() {
				in.Skip()
				out.CustomFields = nil
			} else {
				in.Delim('[')
				if out.CustomFields == nil {
					if !in.IsDelim(']') {
						out.CustomFields = make([]*CustomField, 0, 8)
					} else {
						out.CustomFields = []*CustomField{}
					}
				} else {
					out.CustomFields = (out.CustomFields)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *CustomField
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(CustomField)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.CustomFields = append(out.CustomFields, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComSomniSomGoRedmine3(out *jwriter.Writer, in TimeEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"project\":"
		out.RawString(prefix)
		easyjsonE672cca2EncodeGithubComSomniSomGoRedmine4(out, in.Project)
	}
	{
		const prefix string = ",\"issue\":"
		out.RawString(prefix)
		easyjsonE672cca2EncodeGithubComSomniSomGoRedmine5(out, in.Issue)
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjsonE672cca2EncodeGithubComSomniSomGoRedmine4(out, in.User)
	}
	{
		const prefix string = ",\"activity\":"
		out.RawString(prefix)
		easyjsonE672cca2EncodeGithubComSomniSomGoRedmine4(out, in.Activity)
	}
	{
		const prefix string = ",\"hours\":"
		out.RawString(prefix)
		out.Float32(float32(in.Hours))
	}
	{
		const prefix string = ",\"comments\":"
		out.RawString(prefix)
		out.String(string(in.Comments))
	}
	{
		const prefix string = ",\"spent_on\":"
		out.RawString(prefix)
		out.String(string(in.SpentOn))
	}
	{
		const prefix string = ",\"created_on\":"
		out.RawString(prefix)
		out.String(string(in.CreatedOn))
	}
	{
		const prefix string = ",\"updated_on\":"
		out.RawString(prefix)
		out.String(string(in.UpdatedOn))
	}
	if len(in.CustomFields) != 0 {
		const prefix string = ",\"custom_fields\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.CustomFields {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v TimeEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TimeEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonE672cca2EncodeGithubComSomniSomGoRedmine3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TimeEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TimeEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonE672cca2DecodeGithubComSomniSomGoRedmine3(l, v)
}
func easyjsonE672cca2DecodeGithubComSomniSomGoRedmine5(in *jlexer.Lexer, out *Id) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComSomniSomGoRedmine5(out *jwriter.Writer, in Id) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	out.RawByte('}')
}
func easyjsonE672cca2DecodeGithubComSomniSomGoRedmine4(in *jlexer.Lexer, out *IdName) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.Id = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonE672cca2EncodeGithubComSomniSomGoRedmine4(out *jwriter.Writer, in IdName) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Id))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
